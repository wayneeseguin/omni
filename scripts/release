#!/usr/bin/env perl
use strict;
use warnings;
use File::Path qw(make_path remove_tree);
use File::Copy;
use File::Find;
use File::Basename;
use Cwd;
use Getopt::Long;

my $version = '';
my $help = 0;

GetOptions(
    'version=s' => \$version,
    'help'      => \$help,
) or die("Error in command line arguments\n");

if ($help || !$version) {
    print_usage();
    exit($help ? 0 : 1);
}

my $project_root = Cwd::abs_path('.');
my $releases_dir = "$project_root/releases";
my $output_name = "omni-$version";
my $package_dir = "$releases_dir/$output_name";

print "Creating Omni library release $version\n\n";

# Create releases directory
make_path($releases_dir) unless -d $releases_dir;

# Remove any existing package directory
remove_tree($package_dir) if -d $package_dir;
make_path($package_dir);

print "Copying library source files...\n";

# Create directory structure
my @lib_dirs = qw(pkg internal);
foreach my $dir (@lib_dirs) {
    if (-d $dir) {
        system("cp -r $dir $package_dir/");
        print "  Copied $dir/\n";
    }
}

# Copy Go module files
foreach my $file ('go.mod', 'go.sum') {
    if (-f $file) {
        copy($file, "$package_dir/$file");
        print "  Copied $file\n";
    }
}

# Copy documentation
print "\nCopying documentation...\n";
foreach my $doc ('README.md', 'LICENSE', 'CLAUDE.md') {
    if (-f $doc) {
        copy($doc, "$package_dir/$doc");
        print "  Copied $doc\n";
    }
}

if (-d 'docs') {
    system("cp -r docs $package_dir/");
    print "  Copied docs/\n";
}

# Copy examples (for reference)
if (-d 'examples') {
    print "\nCopying examples...\n";
    system("cp -r examples $package_dir/");
    print "  Copied examples/\n";
}

# Copy configs if they exist
if (-d 'configs') {
    print "\nCopying configs...\n";
    system("cp -r configs $package_dir/");
    print "  Copied configs/\n";
}

# Change to releases directory for archive creation
chdir($releases_dir) or die "Cannot change to releases directory: $!";

# Create tar.gz archive
print "\nCreating archives...\n";
my $tar_archive = "$output_name.tar.gz";
my $tar_result = system("tar -czf $tar_archive $output_name");
die "Failed to create tar.gz archive\n" if $tar_result != 0;
print "  Created $tar_archive\n";

# Create zip archive
my $zip_archive = "$output_name.zip";
my $zip_result = system("zip -qr $zip_archive $output_name");
die "Failed to create zip archive\n" if $zip_result != 0;
print "  Created $zip_archive\n";

# Clean up
print "\nCleaning up...\n";
remove_tree($output_name);

# Display archive information
print "\nRelease packages created:\n";
foreach my $archive ($tar_archive, $zip_archive) {
    my $size = -s $archive;
    my $size_mb = sprintf("%.2f", $size / 1024 / 1024);
    print "  $releases_dir/$archive ($size_mb MB)\n";
}

# Show archive contents
print "\nArchive contents (first 20 entries):\n";
system("tar -tzf $tar_archive | head -20");

exit(0);

sub print_usage {
    print <<'USAGE';
Usage: release --version=<VERSION>

Create library release archives for Omni.

Options:
  --version=<VERSION> Version string (e.g., v1.0.0)
  --help             Show this help message

Examples:
  release --version=v1.0.0
  release --version=v1.2.3

This script will:
1. Package the Go library source code (pkg/, internal/)
2. Include go.mod and go.sum files
3. Include documentation (README.md, LICENSE, docs/)
4. Include examples for reference
5. Generate both .tar.gz and .zip archives in ./releases/
USAGE
}