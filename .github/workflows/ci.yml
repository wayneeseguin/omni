name: CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  vet-and-build:
    name: Vet and Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'
        cache: false

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run go vet
      run: |
        go vet ./pkg/...
        go vet ./internal/...
        cd examples && find . -name "*.go" -exec dirname {} \; | sort -u | xargs -I {} go vet {}

    - name: Build
      run: go build -v ./...

    - name: Build examples
      run: |
        cd examples
        # Build top-level examples
        for dir in */; do
          if [ -f "$dir/main.go" ]; then
            echo "Building example: $dir"
            cd "$dir"
            go build -v .
            cd ..
          fi
        done
        # Build plugin examples
        if [ -d "plugins" ]; then
          cd plugins
          for plugin in */; do
            if [ -f "$plugin/main.go" ]; then
              echo "Building plugin example: plugins/$plugin"
              cd "$plugin"
              go build -v .
              cd ..
            fi
          done
          cd ..
        fi

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: vet-and-build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'
        cache: true
        cache-dependency-path: go.sum

    - name: Install gosec
      run: go install github.com/securego/gosec/v2/cmd/gosec@latest

    - name: Run gosec
      run: gosec ./...

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        scanners: 'vuln'
        format: 'table'
        exit-code: '1'
        severity: 'CRITICAL,HIGH'

    - name: Run go mod tidy
      run: |
        go mod tidy
        git diff --exit-code go.mod go.sum

  test:
    name: Unit & Race Tests w/Coverage
    runs-on: ubuntu-latest
    needs: security

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'
        cache: true
        cache-dependency-path: go.sum

    - name: Download dependencies
      run: go mod download

    - name: Run tests with race detector
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      env:
        OMNI_CHANNEL_SIZE: 1000

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    services:
      nats:
        image: nats:alpine
        ports:
          - 4222:4222
          - 8222:8222
        options: --health-cmd "wget --no-verbose --tries=1 --spider http://localhost:8222/varz || exit 1" --health-interval 5s --health-timeout 3s --health-retries 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'
        cache: true
        cache-dependency-path: go.sum

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build syslog test image
      run: |
        docker build -t omni/syslog-test:latest -f docker/Dockerfile.syslog .

    - name: Start syslog container
      run: |
        docker run -d --name omni-test-syslog \
          -p 5514:514/tcp \
          -p 5514:514/udp \
          -v ${{ github.workspace }}/test-logs:/var/log \
          -e RSYSLOG_DEBUG=on \
          omni/syslog-test:latest

        # Wait for syslog to be ready
        for i in {1..30}; do
          if nc -z localhost 5514; then
            echo "Syslog is ready"
            break
          fi
          echo "Waiting for syslog... ($i/30)"
          sleep 1
        done

    - name: Create test directories
      run: mkdir -p test-logs

    - name: Run integration tests
      run: |
        go test -v -tags=integration -timeout=10m ./...
      env:
        FLEXLOG_INTEGRATION_TEST: true

    - name: Run NATS integration tests
      run: |
        go test -v -tags=integration -timeout=10m ./examples/plugins/nats-backend/... || true
        go test -v -tags=integration -timeout=10m ./examples/nats-logging/... || true

    - name: Run syslog integration tests
      env:
        OMNI_SYSLOG_TEST_ADDR: localhost:5514
        OMNI_SYSLOG_TEST_PROTO: tcp
      run: |
        go test -v -tags=integration -timeout=10m ./pkg/backends -run TestSyslog
        go test -v -tags=integration -timeout=10m ./pkg/omni -run TestSyslog

    - name: Test multi-process scenarios
      run: |
        go test -v -run TestMultiProcess -timeout=5m ./...

    - name: Build disk full test image
      run: |
        docker build -t omni/diskfull-test:latest -f docker/Dockerfile.diskfull .

    - name: Run disk full integration tests
      run: |
        docker run --rm \
          --privileged \
          --cap-add SYS_ADMIN \
          -e OMNI_DISKFULL_TEST_PATH=/test-logs \
          omni/diskfull-test:latest

    - name: Cleanup
      if: always()
      run: |
        docker stop omni-test-syslog || true
        docker rm omni-test-syslog || true

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [vet-and-build, security, test, integration]
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Perl
      run: |
        sudo apt-get update
        sudo apt-get install -y perl zip

    - name: Get latest tag
      id: latest_tag
      run: |
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
        echo "Latest tag: $latest_tag"

    - name: Check for version bump in commit messages
      id: version_check
      run: |
        # Check commit messages since last tag for version bump indicators
        commits_since_tag=$(git log --pretty=format:"%s" ${{ steps.latest_tag.outputs.latest_tag }}..HEAD 2>/dev/null || git log --pretty=format:"%s")

        # Look for conventional commit patterns (case-insensitive)
        if echo "$commits_since_tag" | grep -iE "^(feat|feature)(\(.+\))?:? "; then
          echo "Found feature commits - minor version bump needed"
          echo "bump=minor" >> $GITHUB_OUTPUT
        elif echo "$commits_since_tag" | grep -iE "^fix(\(.+\))?:? "; then
          echo "Found fix commits - patch version bump needed"
          echo "bump=patch" >> $GITHUB_OUTPUT
        elif echo "$commits_since_tag" | grep -iE "BREAKING CHANGE:|^(feat|fix|docs|style|refactor|perf|test|chore)(\(.+\))?!: "; then
          echo "Found breaking changes - major version bump needed"
          echo "bump=major" >> $GITHUB_OUTPUT
        else
          echo "No version bump needed"
          echo "bump=none" >> $GITHUB_OUTPUT
        fi

    - name: Calculate next version
      id: next_version
      if: steps.version_check.outputs.bump != 'none'
      run: |
        current_version="${{ steps.latest_tag.outputs.latest_tag }}"
        # Remove 'v' prefix
        version=${current_version#v}

        # Parse semantic version
        IFS='.' read -r major minor patch <<< "$version"

        # Calculate next version based on bump type
        if [[ "${{ steps.version_check.outputs.bump }}" == "major" ]]; then
          major=$((major + 1))
          minor=0
          patch=0
        elif [[ "${{ steps.version_check.outputs.bump }}" == "minor" ]]; then
          minor=$((minor + 1))
          patch=0
        elif [[ "${{ steps.version_check.outputs.bump }}" == "patch" ]]; then
          patch=$((patch + 1))
        fi

        next_version="v${major}.${minor}.${patch}"
        echo "next_version=$next_version" >> $GITHUB_OUTPUT
        echo "Next version: $next_version"

    - name: Generate release notes
      id: release_notes
      if: steps.version_check.outputs.bump != 'none'
      run: |
        # Generate release notes from commits
        echo "## What's Changed" > release_notes.md
        echo "" >> release_notes.md

        # Group commits by type
        git log --pretty=format:"%s|%h" ${{ steps.latest_tag.outputs.latest_tag }}..HEAD | while IFS='|' read -r msg hash; do
          if [[ $msg =~ ^[Ff]eat(\(.+\))?: ]]; then
            echo "### ✨ Features" >> release_notes.md.feat
            echo "- $msg ($hash)" >> release_notes.md.feat
          elif [[ $msg =~ ^[Ff]ix(\(.+\))?: ]]; then
            echo "### 🐛 Bug Fixes" >> release_notes.md.fix
            echo "- $msg ($hash)" >> release_notes.md.fix
          elif [[ $msg =~ ^[Dd]ocs(\(.+\))?: ]]; then
            echo "### 📚 Documentation" >> release_notes.md.docs
            echo "- $msg ($hash)" >> release_notes.md.docs
          elif [[ $msg =~ ^[Tt]est(\(.+\))?: ]]; then
            echo "### 🧪 Tests" >> release_notes.md.test
            echo "- $msg ($hash)" >> release_notes.md.test
          elif [[ $msg =~ ^[Rr]efactor(\(.+\))?: ]]; then
            echo "### ♻️ Refactoring" >> release_notes.md.refactor
            echo "- $msg ($hash)" >> release_notes.md.refactor
          else
            echo "### 🔧 Other Changes" >> release_notes.md.other
            echo "- $msg ($hash)" >> release_notes.md.other
          fi
        done

        # Combine sections
        for type in feat fix docs test refactor other; do
          if [ -f release_notes.md.$type ]; then
            cat release_notes.md.$type | sort -u >> release_notes.md
            echo "" >> release_notes.md
            rm release_notes.md.$type
          fi
        done

        echo "" >> release_notes.md
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.latest_tag.outputs.latest_tag }}...${{ steps.next_version.outputs.next_version }}" >> release_notes.md

    - name: Create release archives
      if: steps.version_check.outputs.bump != 'none'
      run: |
        perl scripts/release --version=${{ steps.next_version.outputs.next_version }}

    - name: Create and push tag
      if: steps.version_check.outputs.bump != 'none'
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag -a ${{ steps.next_version.outputs.next_version }} -m "Release ${{ steps.next_version.outputs.next_version }}"
        git push origin ${{ steps.next_version.outputs.next_version }}

    - name: Create GitHub Release
      if: steps.version_check.outputs.bump != 'none'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.next_version.outputs.next_version }}
        name: Release ${{ steps.next_version.outputs.next_version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        generate_release_notes: false
        files: |
          releases/omni-${{ steps.next_version.outputs.next_version }}.tar.gz
          releases/omni-${{ steps.next_version.outputs.next_version }}.zip
