name: CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  vet-and-build:
    name: Vet and Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: false

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run go vet
      run: |
        go vet ./pkg/...
        go vet ./internal/...
        cd examples && find . -name "*.go" -exec dirname {} \; | sort -u | xargs -I {} go vet {}

    - name: Build
      run: go build -v ./...

    - name: Build examples
      run: |
        cd examples
        # Build top-level examples
        for dir in */; do
          if [ -f "$dir/main.go" ]; then
            echo "Building example: $dir"
            cd "$dir"
            go build -v .
            cd ..
          fi
        done
        # Build plugin examples
        if [ -d "plugins" ]; then
          cd plugins
          for plugin in */; do
            if [ -f "$plugin/main.go" ]; then
              echo "Building plugin example: plugins/$plugin"
              cd "$plugin"
              go build -v .
              cd ..
            fi
          done
          cd ..
        fi

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: vet-and-build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true
        cache-dependency-path: go.sum

    - name: Install gosec
      run: go install github.com/securego/gosec/v2/cmd/gosec@latest

    - name: Run gosec
      run: gosec ./...

    - name: Run go mod tidy
      run: |
        go mod tidy
        git diff --exit-code go.mod go.sum

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: security

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true
        cache-dependency-path: go.sum

    - name: Download dependencies
      run: go mod download

    - name: Run tests with race detector
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      env:
        FLEXLOG_CHANNEL_SIZE: 1000

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Run benchmarks
      run: go test -run=^$ -bench=. -benchmem ./...

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    services:
      nats:
        image: nats:alpine
        ports:
          - 4222:4222
          - 8222:8222
        options: --health-cmd "wget --no-verbose --tries=1 --spider http://localhost:8222/varz || exit 1" --health-interval 5s --health-timeout 3s --health-retries 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true
        cache-dependency-path: go.sum

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build syslog test image
      run: |
        docker build -t omni/syslog-test:latest -f docker/Dockerfile.syslog .

    - name: Start syslog container
      run: |
        docker run -d --name omni-test-syslog \
          -p 5514:514/tcp \
          -p 5514:514/udp \
          -v ${{ github.workspace }}/test-logs:/var/log \
          -e RSYSLOG_DEBUG=on \
          omni/syslog-test:latest

        # Wait for syslog to be ready
        for i in {1..30}; do
          if nc -z localhost 5514; then
            echo "Syslog is ready"
            break
          fi
          echo "Waiting for syslog... ($i/30)"
          sleep 1
        done

    - name: Create test directories
      run: mkdir -p test-logs

    - name: Run integration tests
      run: |
        go test -v -tags=integration -timeout=10m ./...
      env:
        FLEXLOG_INTEGRATION_TEST: true

    - name: Run NATS integration tests
      run: |
        go test -v -tags=integration -timeout=10m ./examples/plugins/nats-backend/... || true
        go test -v -tags=integration -timeout=10m ./examples/nats-logging/... || true

    - name: Run syslog integration tests
      env:
        OMNI_SYSLOG_TEST_ADDR: localhost:5514
        OMNI_SYSLOG_TEST_PROTO: tcp
      run: |
        go test -v -tags=integration -timeout=10m ./pkg/backends -run TestSyslog
        go test -v -tags=integration -timeout=10m ./pkg/omni -run TestSyslog

    - name: Test multi-process scenarios
      run: |
        go test -v -run TestMultiProcess -timeout=5m ./...

    - name: Cleanup
      if: always()
      run: |
        docker stop omni-test-syslog || true
        docker rm omni-test-syslog || true

  release-check:
    name: Release Check
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: integration

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check if version changed
      id: version
      run: |
        echo "Checking for version changes..."
        # Add version checking logic here

    - name: Create Release Notes
      if: steps.version.outputs.changed == 'true'
      run: |
        echo "## Release Notes" > release_notes.md
        echo "" >> release_notes.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD >> release_notes.md
