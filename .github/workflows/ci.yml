name: CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        go: ['1.21', '1.22', '1.23']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests with race detector
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      env:
        FLEXLOG_CHANNEL_SIZE: 1000
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
    
    - name: Run benchmarks
      run: go test -run=^$ -bench=. -benchmem ./...
      if: matrix.os == 'ubuntu-latest' && matrix.go == '1.23'

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        go: ['1.23']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}
    
    - name: Build
      run: go build -v ./...
    
    - name: Build examples
      run: |
        cd examples
        for dir in */; do
          echo "Building example: $dir"
          cd "$dir"
          go build -v .
          cd ..
        done

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: ./...
    
    - name: Run go mod tidy
      run: |
        go mod tidy
        git diff --exit-code go.mod go.sum

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Run integration tests
      run: |
        go test -v -tags=integration -timeout=10m ./...
      env:
        FLEXLOG_INTEGRATION_TEST: true
    
    - name: Test multi-process scenarios
      run: |
        go test -v -run TestMultiProcess -timeout=5m ./...

  release:
    name: Release Check
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, lint, build, security, integration]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check if version changed
      id: version
      run: |
        echo "Checking for version changes..."
        # Add version checking logic here
    
    - name: Create Release Notes
      if: steps.version.outputs.changed == 'true'
      run: |
        echo "## Release Notes" > release_notes.md
        echo "" >> release_notes.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD >> release_notes.md