name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Set up Perl
        run: |
          sudo apt-get update
          sudo apt-get install -y perl

      - name: Get version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          perl scripts/release --os=${{ matrix.goos }} --arch=${{ matrix.goarch }} --version=${{ steps.version.outputs.VERSION }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: omni-${{ steps.version.outputs.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}
          path: releases/omni-${{ steps.version.outputs.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: releases
          pattern: omni-*

      - name: Move artifacts to correct location
        run: |
          mkdir -p final-releases
          find releases -name "*.tar.gz" -exec mv {} final-releases/ \;

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Omni ${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: final-releases/*.tar.gz
          body: |
            # Omni ${{ steps.version.outputs.VERSION }}

            ## Downloads

            | Platform | Architecture | Download |
            |----------|--------------|----------|
            | Linux    | x86_64       | [omni-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/omni-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz) |
            | Linux    | ARM64        | [omni-${{ steps.version.outputs.VERSION }}-linux-arm64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/omni-${{ steps.version.outputs.VERSION }}-linux-arm64.tar.gz) |
            | macOS    | x86_64       | [omni-${{ steps.version.outputs.VERSION }}-darwin-amd64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/omni-${{ steps.version.outputs.VERSION }}-darwin-amd64.tar.gz) |
            | macOS    | ARM64        | [omni-${{ steps.version.outputs.VERSION }}-darwin-arm64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/omni-${{ steps.version.outputs.VERSION }}-darwin-arm64.tar.gz) |

            ## Installation

            ```bash
            # Download the appropriate version for your platform
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/omni-${{ steps.version.outputs.VERSION }}-<OS>-<ARCH>.tar.gz -o omni.tar.gz
            
            # Extract
            tar -xzf omni.tar.gz
            
            # Move to your PATH (optional)
            sudo mv omni /usr/local/bin/
            ```

            ## What's Changed

            See the [changelog](https://github.com/${{ github.repository }}/compare/...${{ steps.version.outputs.VERSION }}) for details.